#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
#ifndef GEMVARYSMARTHOMESDK_SWIFT_H
#define GEMVARYSMARTHOMESDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wduplicate-method-match"
#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT noexcept
#endif
#else
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT 
#endif
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_CXX_INT_DEFINED)
#define SWIFT_CXX_INT_DEFINED
namespace swift {
using Int = ptrdiff_t;
using UInt = size_t;
}
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CocoaAsyncSocket;
@import Foundation;
@import MQTTClient;
@import ObjectiveC;
@import SocketRocket;
#endif

#import <GemvarySmartHomeSDK/GemvarySmartHomeSDK.h>

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="GemvarySmartHomeSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSString;

/// Access Point AP配网模式
SWIFT_CLASS("_TtC19GemvarySmartHomeSDK15AccessPointTool")
@interface AccessPointTool : NSObject
/// 创建AP配网模式的单例
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AccessPointTool * _Nonnull share;)
+ (AccessPointTool * _Nonnull)share SWIFT_WARN_UNUSED_RESULT;
/// 配网状态 默认未配网
@property (nonatomic) BOOL config;
/// 初始化UDP
- (void)initUDP SWIFT_METHOD_FAMILY(none);
/// 连接UDP
- (void)sendUDPWithSsid:(NSString * _Nonnull)ssid password:(NSString * _Nonnull)password;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface AccessPointTool (SWIFT_EXTENSION(GemvarySmartHomeSDK))
/// 配网返回结果
- (void)apConfigWithResult:(void (^ _Nonnull)(BOOL))result;
/// 停止配网
- (void)stop;
@end

@class GCDAsyncUdpSocket;
@class NSData;

@interface AccessPointTool (SWIFT_EXTENSION(GemvarySmartHomeSDK)) <GCDAsyncUdpSocketDelegate>
/// 没有连接
- (void)udpSocket:(GCDAsyncUdpSocket * _Nonnull)sock didNotConnect:(NSError * _Nullable)error;
/// 已经发送
- (void)udpSocket:(GCDAsyncUdpSocket * _Nonnull)sock didSendDataWithTag:(NSInteger)tag;
/// 已经关闭
- (void)udpSocketDidClose:(GCDAsyncUdpSocket * _Nonnull)sock withError:(NSError * _Nullable)error;
/// 已经连接地址
- (void)udpSocket:(GCDAsyncUdpSocket * _Nonnull)sock didConnectToAddress:(NSData * _Nonnull)address;
/// 没有发送的数据
- (void)udpSocket:(GCDAsyncUdpSocket * _Nonnull)sock didNotSendDataWithTag:(NSInteger)tag dueToError:(NSError * _Nullable)error;
/// 接收的数据
- (void)udpSocket:(GCDAsyncUdpSocket * _Nonnull)sock didReceiveData:(NSData * _Nonnull)data fromAddress:(NSData * _Nonnull)address withFilterContext:(id _Nullable)filterContext;
@end


SWIFT_CLASS("_TtC19GemvarySmartHomeSDK11AirKissTool")
@interface AirKissTool : NSObject
/// 创建数字机单例
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AirKissTool * _Nonnull share;)
+ (AirKissTool * _Nonnull)share SWIFT_WARN_UNUSED_RESULT;
/// 发送数据
- (void)startWithSsid:(NSString * _Nonnull)ssid psk:(NSString * _Nonnull)psk;
/// 停止配网
- (void)stop;
/// 配网返回结果
- (void)airKissConfigWithResult:(void (^ _Nonnull)(BOOL))result;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface AirKissTool (SWIFT_EXTENSION(GemvarySmartHomeSDK)) <FengAirKissDelegate>
/// airKiss配网成功
- (void)FengAirKissFinish:(id _Nonnull)sender dsn:(NSString * _Nonnull)dsn token:(NSString * _Nonnull)setUpToken;
/// airKiss配网失败
- (void)FengAirKissError:(id _Nonnull)sender message:(NSString * _Nonnull)error;
@end


/// 智能家居设备品牌
SWIFT_CLASS("_TtC19GemvarySmartHomeSDK5Brand")
@interface Brand : NSObject
/// S序列设备(ZigBee)
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ShunCom;)
+ (NSString * _Nonnull)ShunCom SWIFT_WARN_UNUSED_RESULT;
/// Z序列(ZigBee)
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull XHY;)
+ (NSString * _Nonnull)XHY SWIFT_WARN_UNUSED_RESULT;
/// LM序列(ZigBee)
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull lumi;)
+ (NSString * _Nonnull)lumi SWIFT_WARN_UNUSED_RESULT;
/// H序列(ZigBee)
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull gemvary;)
+ (NSString * _Nonnull)gemvary SWIFT_WARN_UNUSED_RESULT;
/// 亿联彩灯
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Yeelight;)
+ (NSString * _Nonnull)Yeelight SWIFT_WARN_UNUSED_RESULT;
/// 麦乐克
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull gemvary_multi;)
+ (NSString * _Nonnull)gemvary_multi SWIFT_WARN_UNUSED_RESULT;
/// iEast背景音乐
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull iEast;)
+ (NSString * _Nonnull)iEast SWIFT_WARN_UNUSED_RESULT;
/// 小白
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Gowild;)
+ (NSString * _Nonnull)Gowild SWIFT_WARN_UNUSED_RESULT;
/// 空调网关
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull gemvary_ircc;)
+ (NSString * _Nonnull)gemvary_ircc SWIFT_WARN_UNUSED_RESULT;
/// 坚稳新风
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull gemvary_jl;)
+ (NSString * _Nonnull)gemvary_jl SWIFT_WARN_UNUSED_RESULT;
/// 超级碗
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull LifeSmart;)
+ (NSString * _Nonnull)LifeSmart SWIFT_WARN_UNUSED_RESULT;
/// 君和小网关
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull gemvary_n;)
+ (NSString * _Nonnull)gemvary_n SWIFT_WARN_UNUSED_RESULT;
/// 思创断路器
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull breaker;)
+ (NSString * _Nonnull)breaker SWIFT_WARN_UNUSED_RESULT;
/// 霍尼韦尔新风
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Honeywell;)
+ (NSString * _Nonnull)Honeywell SWIFT_WARN_UNUSED_RESULT;
/// 海贝思
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull gemvary_hbs;)
+ (NSString * _Nonnull)gemvary_hbs SWIFT_WARN_UNUSED_RESULT;
/// M9
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull gemvary_m9;)
+ (NSString * _Nonnull)gemvary_m9 SWIFT_WARN_UNUSED_RESULT;
/// weex端赋值brand 坚稳门铃
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull jw;)
+ (NSString * _Nonnull)jw SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// 消息命令
SWIFT_CLASS("_TtC19GemvarySmartHomeSDK7Command")
@interface Command : NSObject
/// 查询
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull query;)
+ (NSString * _Nonnull)query SWIFT_WARN_UNUSED_RESULT;
/// 上传
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull up;)
+ (NSString * _Nonnull)up SWIFT_WARN_UNUSED_RESULT;
/// 请求
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull request;)
+ (NSString * _Nonnull)request SWIFT_WARN_UNUSED_RESULT;
/// 删除
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy, getter=delete) NSString * _Nonnull delete_;)
+ (NSString * _Nonnull)delete SWIFT_WARN_UNUSED_RESULT;
/// 设置
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull set;)
+ (NSString * _Nonnull)set SWIFT_WARN_UNUSED_RESULT;
/// 多查询
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull query_multi;)
+ (NSString * _Nonnull)query_multi SWIFT_WARN_UNUSED_RESULT;
/// 查询所有
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull query_all;)
+ (NSString * _Nonnull)query_all SWIFT_WARN_UNUSED_RESULT;
/// 查询认证
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull query_authority;)
+ (NSString * _Nonnull)query_authority SWIFT_WARN_UNUSED_RESULT;
/// 查询认证
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull query_dev_auth;)
+ (NSString * _Nonnull)query_dev_auth SWIFT_WARN_UNUSED_RESULT;
/// 开始
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull start;)
+ (NSString * _Nonnull)start SWIFT_WARN_UNUSED_RESULT;
/// 激活
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull active;)
+ (NSString * _Nonnull)active SWIFT_WARN_UNUSED_RESULT;
/// 添加
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull add;)
+ (NSString * _Nonnull)add SWIFT_WARN_UNUSED_RESULT;
/// 修改
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull modify;)
+ (NSString * _Nonnull)modify SWIFT_WARN_UNUSED_RESULT;
/// 修改设备信息
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull shortcut;)
+ (NSString * _Nonnull)shortcut SWIFT_WARN_UNUSED_RESULT;
/// 修改功能名
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull modify_func_name;)
+ (NSString * _Nonnull)modify_func_name SWIFT_WARN_UNUSED_RESULT;
/// 控制
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull control;)
+ (NSString * _Nonnull)control SWIFT_WARN_UNUSED_RESULT;
/// 停止
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull stop;)
+ (NSString * _Nonnull)stop SWIFT_WARN_UNUSED_RESULT;
/// 快照
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull photo;)
+ (NSString * _Nonnull)photo SWIFT_WARN_UNUSED_RESULT;
/// 更改名字
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull modify_name;)
+ (NSString * _Nonnull)modify_name SWIFT_WARN_UNUSED_RESULT;
/// 允许新设备上报
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull allow;)
+ (NSString * _Nonnull)allow SWIFT_WARN_UNUSED_RESULT;
/// 保存设备SlaveId
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull add_slaveIndex;)
+ (NSString * _Nonnull)add_slaveIndex SWIFT_WARN_UNUSED_RESULT;
/// rs485转ZIGBEE设置 配置串口波特率
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull serial_config;)
+ (NSString * _Nonnull)serial_config SWIFT_WARN_UNUSED_RESULT;
/// rs485转ZIGBEE设置 心跳
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull heatbeat_config;)
+ (NSString * _Nonnull)heatbeat_config SWIFT_WARN_UNUSED_RESULT;
/// 配置485子设备的SLAVE ID
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull setting_slave_id;)
+ (NSString * _Nonnull)setting_slave_id SWIFT_WARN_UNUSED_RESULT;
/// 面板双控配置   新增设备双控
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull add_double_ctrl;)
+ (NSString * _Nonnull)add_double_ctrl SWIFT_WARN_UNUSED_RESULT;
/// 面板双控配置   修改设备双控
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull modify_double_ctrl;)
+ (NSString * _Nonnull)modify_double_ctrl SWIFT_WARN_UNUSED_RESULT;
/// 面板双控配置   删除设备双控
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull delete_double_ctrl;)
+ (NSString * _Nonnull)delete_double_ctrl SWIFT_WARN_UNUSED_RESULT;
/// 面板双控配置   查询设备双控情况
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull query_double_ctrl;)
+ (NSString * _Nonnull)query_double_ctrl SWIFT_WARN_UNUSED_RESULT;
/// 空调关联配置   指定某个设备配置关联设备
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull relation_config;)
+ (NSString * _Nonnull)relation_config SWIFT_WARN_UNUSED_RESULT;
/// 空调关联配置   温控面板设备查询关联配置信息
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull relation_query;)
+ (NSString * _Nonnull)relation_query SWIFT_WARN_UNUSED_RESULT;
/// 设置
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull setting;)
+ (NSString * _Nonnull)setting SWIFT_WARN_UNUSED_RESULT;
/// 修改消毒方式的别名
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull rename;)
+ (NSString * _Nonnull)rename SWIFT_WARN_UNUSED_RESULT;
/// 修改设备类型    该协议主要用于三合一温控器配置
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull change_type;)
+ (NSString * _Nonnull)change_type SWIFT_WARN_UNUSED_RESULT;
/// 广告开关
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ad_setting;)
+ (NSString * _Nonnull)ad_setting SWIFT_WARN_UNUSED_RESULT;
/// 数据备份
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull backup;)
+ (NSString * _Nonnull)backup SWIFT_WARN_UNUSED_RESULT;
/// 数据恢复
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull restore;)
+ (NSString * _Nonnull)restore SWIFT_WARN_UNUSED_RESULT;
/// 删除所有
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull delete_all;)
+ (NSString * _Nonnull)delete_all SWIFT_WARN_UNUSED_RESULT;
///
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull push;)
+ (NSString * _Nonnull)push SWIFT_WARN_UNUSED_RESULT;
/// 新设备替换
@property (nonatomic, readonly, copy) NSString * _Nonnull dev_replace;
/// 根据GID查询设备是否已经存在  device_manager
@property (nonatomic, readonly, copy) NSString * _Nonnull dev_check;
/// 检测设备网络情况  device_manager
@property (nonatomic, readonly, copy) NSString * _Nonnull detect_network;
/// 查询设备版本  device_manager
@property (nonatomic, readonly, copy) NSString * _Nonnull check_version;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// 智能家居设备类型
SWIFT_CLASS("_TtC19GemvarySmartHomeSDK12DevClassType")
@interface DevClassType : NSObject
/// light_one: 单键开关
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull light_one;)
+ (NSString * _Nonnull)light_one SWIFT_WARN_UNUSED_RESULT;
/// light_two: 双键开关
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull light_two;)
+ (NSString * _Nonnull)light_two SWIFT_WARN_UNUSED_RESULT;
/// dimmer: 调光开关
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull dimmer;)
+ (NSString * _Nonnull)dimmer SWIFT_WARN_UNUSED_RESULT;
/// curtain: 窗帘电机
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull curtain;)
+ (NSString * _Nonnull)curtain SWIFT_WARN_UNUSED_RESULT;
/// socket: Aqara智能插座, Aqara 86暗盒
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull socket;)
+ (NSString * _Nonnull)socket SWIFT_WARN_UNUSED_RESULT;
/// thermostat: 温度控制器
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull thermostat;)
+ (NSString * _Nonnull)thermostat SWIFT_WARN_UNUSED_RESULT;
/// repeater_one: 红外转发器
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull repeater_one;)
+ (NSString * _Nonnull)repeater_one SWIFT_WARN_UNUSED_RESULT;
/// repeater_two:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull repeater_two;)
+ (NSString * _Nonnull)repeater_two SWIFT_WARN_UNUSED_RESULT;
/// magnet: Aqara窗磁传感器
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull magnet;)
+ (NSString * _Nonnull)magnet SWIFT_WARN_UNUSED_RESULT;
/// motion: Aqara人体传感器
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull motion;)
+ (NSString * _Nonnull)motion SWIFT_WARN_UNUSED_RESULT;
/// aswitch: Aqara无线开关传感器, Aqara 86无线开关单键
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy, getter=switch) NSString * _Nonnull switch_;)
+ (NSString * _Nonnull)switch SWIFT_WARN_UNUSED_RESULT;
/// dual_swich: Aqara 86无线开关双键
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull dual_swich;)
+ (NSString * _Nonnull)dual_swich SWIFT_WARN_UNUSED_RESULT;
/// ht_sensor: Aqara温湿度传感器
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ht_sensor;)
+ (NSString * _Nonnull)ht_sensor SWIFT_WARN_UNUSED_RESULT;
/// rgbw_right:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull rgbw_right;)
+ (NSString * _Nonnull)rgbw_right SWIFT_WARN_UNUSED_RESULT;
/// cube: 魔方
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull cube;)
+ (NSString * _Nonnull)cube SWIFT_WARN_UNUSED_RESULT;
/// smoke: 烟雾报警器
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull smoke;)
+ (NSString * _Nonnull)smoke SWIFT_WARN_UNUSED_RESULT;
/// natgas: 可燃气体报警器
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull natgas;)
+ (NSString * _Nonnull)natgas SWIFT_WARN_UNUSED_RESULT;
/// wleak: 水浸
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull wleak;)
+ (NSString * _Nonnull)wleak SWIFT_WARN_UNUSED_RESULT;
/// scene_panel: 情景面板
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull scene_panel;)
+ (NSString * _Nonnull)scene_panel SWIFT_WARN_UNUSED_RESULT;
/// rgb_light: 彩灯
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull rgb_light;)
+ (NSString * _Nonnull)rgb_light SWIFT_WARN_UNUSED_RESULT;
/// lock: 门锁
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull lock;)
+ (NSString * _Nonnull)lock SWIFT_WARN_UNUSED_RESULT;
/// envir_sensor: 环境传感器设备
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull envir_sensor;)
+ (NSString * _Nonnull)envir_sensor SWIFT_WARN_UNUSED_RESULT;
/// aircondition: 空调
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull aircondition;)
+ (NSString * _Nonnull)aircondition SWIFT_WARN_UNUSED_RESULT;
/// camera: 摄像头
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull camera;)
+ (NSString * _Nonnull)camera SWIFT_WARN_UNUSED_RESULT;
/// fresh_air_system: 新风系统
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull fresh_air_system;)
+ (NSString * _Nonnull)fresh_air_system SWIFT_WARN_UNUSED_RESULT;
/// fresh_air_system_gem: gem新风系统
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull fresh_air_system_gem;)
+ (NSString * _Nonnull)fresh_air_system_gem SWIFT_WARN_UNUSED_RESULT;
/// rgb_light_aqra: aqra彩灯
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull rgb_light_aqra;)
+ (NSString * _Nonnull)rgb_light_aqra SWIFT_WARN_UNUSED_RESULT;
/// laundry_rack: 晾衣架
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull laundry_rack;)
+ (NSString * _Nonnull)laundry_rack SWIFT_WARN_UNUSED_RESULT;
/// audio: 背景音乐
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull audio;)
+ (NSString * _Nonnull)audio SWIFT_WARN_UNUSED_RESULT;
/// modbus_gw: IRACC
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull modbus_gw;)
+ (NSString * _Nonnull)modbus_gw SWIFT_WARN_UNUSED_RESULT;
/// user_def_device: 自定义红外设备
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull user_def_device;)
+ (NSString * _Nonnull)user_def_device SWIFT_WARN_UNUSED_RESULT;
/// tv: 电视(红外)
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull tv;)
+ (NSString * _Nonnull)tv SWIFT_WARN_UNUSED_RESULT;
/// lifesmart_repeater: 超级碗(红外转发)
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull lifesmart_repeater;)
+ (NSString * _Nonnull)lifesmart_repeater SWIFT_WARN_UNUSED_RESULT;
/// ac: 空调
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ac;)
+ (NSString * _Nonnull)ac SWIFT_WARN_UNUSED_RESULT;
/// acl: 空⽓净化器
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull acl;)
+ (NSString * _Nonnull)acl SWIFT_WARN_UNUSED_RESULT;
/// box: 网络盒⼦
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull box;)
+ (NSString * _Nonnull)box SWIFT_WARN_UNUSED_RESULT;
/// dvd: 录像机
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull dvd;)
+ (NSString * _Nonnull)dvd SWIFT_WARN_UNUSED_RESULT;
/// fan: 风扇
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull fan;)
+ (NSString * _Nonnull)fan SWIFT_WARN_UNUSED_RESULT;
/// stb: 机顶盒
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull stb;)
+ (NSString * _Nonnull)stb SWIFT_WARN_UNUSED_RESULT;
/// audible: 声光报警器
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull audible;)
+ (NSString * _Nonnull)audible SWIFT_WARN_UNUSED_RESULT;
/// scene_panel6: 6键情景面板
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull scene_panel6;)
+ (NSString * _Nonnull)scene_panel6 SWIFT_WARN_UNUSED_RESULT;
/// gateway: 网关
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull gateway;)
+ (NSString * _Nonnull)gateway SWIFT_WARN_UNUSED_RESULT;
/// doorbell: 可视门铃
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull doorbell;)
+ (NSString * _Nonnull)doorbell SWIFT_WARN_UNUSED_RESULT;
/// envir_device: 三合一设备
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull envir_device;)
+ (NSString * _Nonnull)envir_device SWIFT_WARN_UNUSED_RESULT;
/// floor_heating: 地暖
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull floor_heating;)
+ (NSString * _Nonnull)floor_heating SWIFT_WARN_UNUSED_RESULT;
/// 猫眼设备
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull cateye;)
+ (NSString * _Nonnull)cateye SWIFT_WARN_UNUSED_RESULT;
/// M9魔方组合面板
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull gem_cube;)
+ (NSString * _Nonnull)gem_cube SWIFT_WARN_UNUSED_RESULT;
/// m9红外转发器的空调设备
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull gem_ac_m9ir;)
+ (NSString * _Nonnull)gem_ac_m9ir SWIFT_WARN_UNUSED_RESULT;
/// m9红外转发器的电视设备
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull gem_tv_m9ir;)
+ (NSString * _Nonnull)gem_tv_m9ir SWIFT_WARN_UNUSED_RESULT;
/// m9红外转发器的风扇设备
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull gem_fan_m9ir;)
+ (NSString * _Nonnull)gem_fan_m9ir SWIFT_WARN_UNUSED_RESULT;
/// 信号中继器
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull gem_sigrepeater_zb;)
+ (NSString * _Nonnull)gem_sigrepeater_zb SWIFT_WARN_UNUSED_RESULT;
/// 8路安防
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull wired_alarm;)
+ (NSString * _Nonnull)wired_alarm SWIFT_WARN_UNUSED_RESULT;
/// 三合一新风控制面板
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull fresh_air_system_lf31;)
+ (NSString * _Nonnull)fresh_air_system_lf31 SWIFT_WARN_UNUSED_RESULT;
/// QQ音乐播放器
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull audio_qq_player;)
+ (NSString * _Nonnull)audio_qq_player SWIFT_WARN_UNUSED_RESULT;
/// 坚稳空调立体机 新风能源一体机
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull fresh_air_system_ac_jw;)
+ (NSString * _Nonnull)fresh_air_system_ac_jw SWIFT_WARN_UNUSED_RESULT;
/// 推窗器
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull curtain_push_jw;)
+ (NSString * _Nonnull)curtain_push_jw SWIFT_WARN_UNUSED_RESULT;
/// nx1小主机
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull gateway_nx1n2;)
+ (NSString * _Nonnull)gateway_nx1n2 SWIFT_WARN_UNUSED_RESULT;
/// 窗帘电机
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull curtain_motor;)
+ (NSString * _Nonnull)curtain_motor SWIFT_WARN_UNUSED_RESULT;
/// 支持宏芯达码库主机
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull gateway_n3;)
+ (NSString * _Nonnull)gateway_n3 SWIFT_WARN_UNUSED_RESULT;
///
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull gateway_n5;)
+ (NSString * _Nonnull)gateway_n5 SWIFT_WARN_UNUSED_RESULT;
/// 宏芯达码库 电视
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull tv_hxd;)
+ (NSString * _Nonnull)tv_hxd SWIFT_WARN_UNUSED_RESULT;
/// 宏芯达码库 空调
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ac_hxd;)
+ (NSString * _Nonnull)ac_hxd SWIFT_WARN_UNUSED_RESULT;
/// 宏芯达码库 电风扇
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull fan_hxd;)
+ (NSString * _Nonnull)fan_hxd SWIFT_WARN_UNUSED_RESULT;
/// 宏芯达码库 DVD
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull dvd_hxd;)
+ (NSString * _Nonnull)dvd_hxd SWIFT_WARN_UNUSED_RESULT;
/// 宏芯达码库 机顶盒
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull stb_hxd;)
+ (NSString * _Nonnull)stb_hxd SWIFT_WARN_UNUSED_RESULT;
/// 宏芯达码库 自定义红外设备
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull user_def_device_hxd;)
+ (NSString * _Nonnull)user_def_device_hxd SWIFT_WARN_UNUSED_RESULT;
/// 宏芯达码库 空气净化器
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull acl_hxd;)
+ (NSString * _Nonnull)acl_hxd SWIFT_WARN_UNUSED_RESULT;
/// 宏芯达码库 IP电视
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull iptv_hxd;)
+ (NSString * _Nonnull)iptv_hxd SWIFT_WARN_UNUSED_RESULT;
/// 宏芯达码库 投影仪
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull projector_hxd;)
+ (NSString * _Nonnull)projector_hxd SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull gem_zb485_gw;)
+ (NSString * _Nonnull)gem_zb485_gw SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull combination_panel;)
+ (NSString * _Nonnull)combination_panel SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// 白名单是否打开
SWIFT_CLASS("_TtC19GemvarySmartHomeSDK12DevWhiteList")
@interface DevWhiteList : NSObject
/// 打开白名单
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull open;)
+ (NSString * _Nonnull)open SWIFT_WARN_UNUSED_RESULT;
/// 关闭白名单
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull close;)
+ (NSString * _Nonnull)close SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// 客户端类型
SWIFT_CLASS("_TtC19GemvarySmartHomeSDK8FromRole")
@interface FromRole : NSObject
/// 手机
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull phone;)
+ (NSString * _Nonnull)phone SWIFT_WARN_UNUSED_RESULT;
/// 平板
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull smarthome;)
+ (NSString * _Nonnull)smarthome SWIFT_WARN_UNUSED_RESULT;
/// 主机
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull business;)
+ (NSString * _Nonnull)business SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// 功能命令
SWIFT_CLASS("_TtC19GemvarySmartHomeSDK7FuncCmd")
@interface FuncCmd : NSObject
/// 成功
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ok;)
+ (NSString * _Nonnull)ok SWIFT_WARN_UNUSED_RESULT;
/// 取消
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull cancel;)
+ (NSString * _Nonnull)cancel SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// 设备功能命令
SWIFT_CLASS("_TtC19GemvarySmartHomeSDK11FuncCommnad")
@interface FuncCommnad : NSObject
/// 控制(红外设备的学习)
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull write;)
+ (NSString * _Nonnull)write SWIFT_WARN_UNUSED_RESULT;
/// 学习(红外设备的学习)
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull study;)
+ (NSString * _Nonnull)study SWIFT_WARN_UNUSED_RESULT;
/// 控制
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull control;)
+ (NSString * _Nonnull)control SWIFT_WARN_UNUSED_RESULT;
/// 开
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull on;)
+ (NSString * _Nonnull)on SWIFT_WARN_UNUSED_RESULT;
/// 关
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull off;)
+ (NSString * _Nonnull)off SWIFT_WARN_UNUSED_RESULT;
/// 设备状态上报
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull dev_state;)
+ (NSString * _Nonnull)dev_state SWIFT_WARN_UNUSED_RESULT;
/// 调光
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull brightness;)
+ (NSString * _Nonnull)brightness SWIFT_WARN_UNUSED_RESULT;
/// 停止
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull stop;)
+ (NSString * _Nonnull)stop SWIFT_WARN_UNUSED_RESULT;
///
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull level;)
+ (NSString * _Nonnull)level SWIFT_WARN_UNUSED_RESULT;
///
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull reset;)
+ (NSString * _Nonnull)reset SWIFT_WARN_UNUSED_RESULT;
///
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull direct;)
+ (NSString * _Nonnull)direct SWIFT_WARN_UNUSED_RESULT;
///
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull reverse;)
+ (NSString * _Nonnull)reverse SWIFT_WARN_UNUSED_RESULT;
///
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull power_consumed;)
+ (NSString * _Nonnull)power_consumed SWIFT_WARN_UNUSED_RESULT;
///
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull load_power;)
+ (NSString * _Nonnull)load_power SWIFT_WARN_UNUSED_RESULT;
///
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull load_voltage;)
+ (NSString * _Nonnull)load_voltage SWIFT_WARN_UNUSED_RESULT;
///
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ct;)
+ (NSString * _Nonnull)ct SWIFT_WARN_UNUSED_RESULT;
///
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull rgb;)
+ (NSString * _Nonnull)rgb SWIFT_WARN_UNUSED_RESULT;
///
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull hsv;)
+ (NSString * _Nonnull)hsv SWIFT_WARN_UNUSED_RESULT;
///
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull start_cf;)
+ (NSString * _Nonnull)start_cf SWIFT_WARN_UNUSED_RESULT;
///
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull stop_cf;)
+ (NSString * _Nonnull)stop_cf SWIFT_WARN_UNUSED_RESULT;
///
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull default_rgb;)
+ (NSString * _Nonnull)default_rgb SWIFT_WARN_UNUSED_RESULT;
///
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull unlocking;)
+ (NSString * _Nonnull)unlocking SWIFT_WARN_UNUSED_RESULT;
///
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull back_lock;)
+ (NSString * _Nonnull)back_lock SWIFT_WARN_UNUSED_RESULT;
///
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull normal;)
+ (NSString * _Nonnull)normal SWIFT_WARN_UNUSED_RESULT;
///
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull high_safe;)
+ (NSString * _Nonnull)high_safe SWIFT_WARN_UNUSED_RESULT;
///
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull alway_open;)
+ (NSString * _Nonnull)alway_open SWIFT_WARN_UNUSED_RESULT;
///
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull lock_coerce;)
+ (NSString * _Nonnull)lock_coerce SWIFT_WARN_UNUSED_RESULT;
///
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull malfunction;)
+ (NSString * _Nonnull)malfunction SWIFT_WARN_UNUSED_RESULT;
///
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull low_voltage;)
+ (NSString * _Nonnull)low_voltage SWIFT_WARN_UNUSED_RESULT;
///
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull exh_locking;)
+ (NSString * _Nonnull)exh_locking SWIFT_WARN_UNUSED_RESULT;
///
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Ind_tongue;)
+ (NSString * _Nonnull)Ind_tongue SWIFT_WARN_UNUSED_RESULT;
///
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull open_record;)
+ (NSString * _Nonnull)open_record SWIFT_WARN_UNUSED_RESULT;
///
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull mode_setting;)
+ (NSString * _Nonnull)mode_setting SWIFT_WARN_UNUSED_RESULT;
///
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull time_update;)
+ (NSString * _Nonnull)time_update SWIFT_WARN_UNUSED_RESULT;
///
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull lock_init;)
+ (NSString * _Nonnull)lock_init SWIFT_WARN_UNUSED_RESULT;
///
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull passwd_mng;)
+ (NSString * _Nonnull)passwd_mng SWIFT_WARN_UNUSED_RESULT;
///
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull request_status;)
+ (NSString * _Nonnull)request_status SWIFT_WARN_UNUSED_RESULT;
///
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull serial;)
+ (NSString * _Nonnull)serial SWIFT_WARN_UNUSED_RESULT;
///
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull poll_time;)
+ (NSString * _Nonnull)poll_time SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull motion;)
+ (NSString * _Nonnull)motion SWIFT_WARN_UNUSED_RESULT;
///
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull night_light;)
+ (NSString * _Nonnull)night_light SWIFT_WARN_UNUSED_RESULT;
///
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull light_perception;)
+ (NSString * _Nonnull)light_perception SWIFT_WARN_UNUSED_RESULT;
///
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull app_control;)
+ (NSString * _Nonnull)app_control SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull slow_on_time;)
+ (NSString * _Nonnull)slow_on_time SWIFT_WARN_UNUSED_RESULT;
///
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull slow_off_time;)
+ (NSString * _Nonnull)slow_off_time SWIFT_WARN_UNUSED_RESULT;
///
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sensitivity;)
+ (NSString * _Nonnull)sensitivity SWIFT_WARN_UNUSED_RESULT;
///
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull turnOnLux;)
+ (NSString * _Nonnull)turnOnLux SWIFT_WARN_UNUSED_RESULT;
///
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull minBright;)
+ (NSString * _Nonnull)minBright SWIFT_WARN_UNUSED_RESULT;
///
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull turnOffDelay;)
+ (NSString * _Nonnull)turnOffDelay SWIFT_WARN_UNUSED_RESULT;
///
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull smoke_alarm;)
+ (NSString * _Nonnull)smoke_alarm SWIFT_WARN_UNUSED_RESULT;
///
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull switch_alarm;)
+ (NSString * _Nonnull)switch_alarm SWIFT_WARN_UNUSED_RESULT;
///
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull magnet_alarm;)
+ (NSString * _Nonnull)magnet_alarm SWIFT_WARN_UNUSED_RESULT;
///
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull motion_alarm;)
+ (NSString * _Nonnull)motion_alarm SWIFT_WARN_UNUSED_RESULT;
/// 单击
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull click;)
+ (NSString * _Nonnull)click SWIFT_WARN_UNUSED_RESULT;
///
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull glass_alarm;)
+ (NSString * _Nonnull)glass_alarm SWIFT_WARN_UNUSED_RESULT;
/// 双击
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull double_click;)
+ (NSString * _Nonnull)double_click SWIFT_WARN_UNUSED_RESULT;
/// 长按
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull long_press;)
+ (NSString * _Nonnull)long_press SWIFT_WARN_UNUSED_RESULT;
/// 红外对码
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ir_matching;)
+ (NSString * _Nonnull)ir_matching SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// 功能属性模块
SWIFT_CLASS("_TtC19GemvarySmartHomeSDK12FunctionPart")
@interface FunctionPart : NSObject
/// 查询所有功能属性
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull all;)
+ (NSString * _Nonnull)all SWIFT_WARN_UNUSED_RESULT;
/// 查询支持做联动控制动作的属性
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull linkage;)
+ (NSString * _Nonnull)linkage SWIFT_WARN_UNUSED_RESULT;
/// 查询支持做联动条件的功能属性
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull conds;)
+ (NSString * _Nonnull)conds SWIFT_WARN_UNUSED_RESULT;
/// 查询有参数需要显示的属性
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull param;)
+ (NSString * _Nonnull)param SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// 局域网库的处理方法
SWIFT_CLASS("_TtC19GemvarySmartHomeSDK13LanLibService")
@interface LanLibService : NSObject
/// 创建单例
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) LanLibService * _Nonnull share;)
+ (LanLibService * _Nonnull)share SWIFT_WARN_UNUSED_RESULT;
+ (void)setShare:(LanLibService * _Nonnull)value;
/// 发送UDP的数据内容
- (void)sendUdpDataWithSendStr:(NSString * _Nonnull)sendStr;
/// 断开TCP连接
- (void)disconnectTCP;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface LanLibService (SWIFT_EXTENSION(GemvarySmartHomeSDK)) <LanNetDelegate>
/// 发送的数据
- (void)houmanSendData:(NSString * _Nonnull)sendStr;
/// 接收到的数据
- (void)tcpRecvDataCb:(NSString * _Nonnull)recvStr;
/// 状态不为空
- (void)tcpConnectStatusCb:(int32_t)statusStr;
@end



@interface LanLibService (SWIFT_EXTENSION(GemvarySmartHomeSDK))
/// 清空局域网设备列表
- (void)removeLanDevices;
/// 获取局域网状态
- (void)getTcpStatus;
/// 搜索局域网设备
- (void)searchLanDeviceWithAccount:(NSString * _Nonnull)account;
/// UDP 返回接收到的设备列表
- (void)currentLanDeviceListCallBackWithDeviceList:(void (^ _Nonnull)(NSArray<NSDictionary<NSString *, id> *> * _Nonnull))deviceList;
/// 连接TCP并订阅数据
- (void)subscribeDataWithAccount:(NSString * _Nonnull)account serverIP:(NSString * _Nonnull)serverIP deviceID:(NSString * _Nonnull)deviceID state:(void (^ _Nonnull)(NSError * _Nullable))state;
/// 接收数据的闭包
- (void)receiveDataWithMsg:(void (^ _Nonnull)(NSString * _Nullable))msg;
/// 转发数据到网关
- (void)sendDataToGatewayWithJson:(NSString * _Nonnull)json callBack:(void (^ _Nonnull)(NSString * _Nullable))callBack;
@end


SWIFT_CLASS("_TtC19GemvarySmartHomeSDK11MQTTService")
@interface MQTTService : NSObject
/// 创建单例
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MQTTService * _Nonnull share;)
+ (MQTTService * _Nonnull)share SWIFT_WARN_UNUSED_RESULT;
/// 初始化
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// 客户使用SDK时，需要设置appId
/// \param appID appId参数
///
///
/// returns:
/// 返回类型空
- (void)setupParamWithAppId:(NSString * _Nonnull)appId;
/// MQTT开始连接
/// \param userID 用户账号
///
/// \param token MQTT的token
///
/// \param deviceID 设备码(可不填)
///
///
/// returns:
/// 返回为空
- (void)connectWithUserID:(NSString * _Nonnull)userID token:(NSString * _Nonnull)token deviceID:(NSString * _Nonnull)deviceID;
@end



@interface MQTTService (SWIFT_EXTENSION(GemvarySmartHomeSDK))
/// MQTT发送数据
/// \param sendMag 发送数据内容
///
/// \param backMsg 发送返回状态
///
///
/// returns:
/// 返回类型为空
- (void)sendDataWithSendMag:(NSString * _Nonnull)sendMag backMsg:(void (^ _Nonnull)(NSString * _Nullable, NSError * _Nullable))backMsg;
/// MQTT接收数据
/// \param msg 接收内容闭包
///
///
/// returns:
/// 返回类型为空
- (void)receiveDataWithMsg:(void (^ _Nonnull)(NSString * _Nullable))msg;
/// MQTT订阅数据
/// \param deviceID 设备码
///
/// \param state 订阅返回状态
///
///
/// returns:
/// 返回类型为空
- (void)subscribeDataWithDeviceID:(NSString * _Nonnull)deviceID state:(void (^ _Nonnull)(NSError * _Nullable))state;
/// MQTT取消订阅
/// \param error 取消订阅返回状态
///
///
/// returns:
/// 返回类型为空
- (void)unSubscribeDataWithError:(void (^ _Nonnull)(NSError * _Nullable))error;
/// MQTT在线状态
/// \param state 在线状态
///
///
/// returns:
/// 返回类型为空
- (void)devStateWithState:(void (^ _Nullable)(NSString * _Nullable))state;
@end

@class MQTTSession;
@class NSNumber;

@interface MQTTService (SWIFT_EXTENSION(GemvarySmartHomeSDK)) <MQTTSessionDelegate>
/// 在收到新消息时调用
- (void)newMessage:(MQTTSession * _Null_unspecified)session data:(NSData * _Null_unspecified)data onTopic:(NSString * _Null_unspecified)topic qos:(MQTTQosLevel)qos retained:(BOOL)retained mid:(uint32_t)mid;
/// 在收到新消息时调用
- (BOOL)newMessageWithFeedback:(MQTTSession * _Null_unspecified)session data:(NSData * _Null_unspecified)data onTopic:(NSString * _Null_unspecified)topic qos:(MQTTQosLevel)qos retained:(BOOL)retained mid:(uint32_t)mid SWIFT_WARN_UNUSED_RESULT;
/// 对于mqttio OBJC向后兼容性
- (void)session:(MQTTSession * _Null_unspecified)session newMessage:(NSData * _Null_unspecified)data onTopic:(NSString * _Null_unspecified)topic;
/// 在实际传递已发布消息时调用
- (void)messageDelivered:(MQTTSession * _Null_unspecified)session msgID:(uint16_t)msgID;
/// 在实际传递已发布消息时调用
- (void)messageDelivered:(MQTTSession * _Null_unspecified)session msgID:(uint16_t)msgID topic:(NSString * _Null_unspecified)topic data:(NSData * _Null_unspecified)data qos:(MQTTQosLevel)qos retainFlag:(BOOL)retainFlag;
/// 当MQTT代理确认取消订阅时调用
- (void)unsubAckReceived:(MQTTSession * _Null_unspecified)session msgID:(uint16_t)msgID;
/// 当MQTT代理确认订阅时调用
- (void)subAckReceived:(MQTTSession * _Null_unspecified)session msgID:(uint16_t)msgID grantedQoss:(NSArray<NSNumber *> * _Null_unspecified)qoss;
/// 在建立，关闭连接或发生问题时调用
- (void)handleEvent:(MQTTSession * _Null_unspecified)session event:(MQTTSessionEvent)eventCode error:(NSError * _Null_unspecified)error;
/// 已经连接
- (void)connected:(MQTTSession * _Null_unspecified)session;
/// 连接错误
- (void)connectionError:(MQTTSession * _Null_unspecified)session error:(NSError * _Null_unspecified)error;
/// 在关闭连接时调用 84107890870c182608cf
- (void)connectionClosed:(MQTTSession * _Null_unspecified)session;
/// 在成功建立连接时调用
- (void)connected:(MQTTSession * _Null_unspecified)session sessionPresent:(BOOL)sessionPresent;
/// 当连接被拒绝时调用
- (void)connectionRefused:(MQTTSession * _Null_unspecified)session error:(NSError * _Null_unspecified)error;
/// 在发生MQTT协议错误时调用
- (void)protocolError:(MQTTSession * _Null_unspecified)session error:(NSError * _Null_unspecified)error;
/// 当MQTTClients内部缓冲区的内容更改时调用，用于监视传输和接收消息的完成情况
- (void)buffered:(MQTTSession * _Null_unspecified)session flowingIn:(NSUInteger)flowingIn flowingOut:(NSUInteger)flowingOut;
/// 当MQTTClients内部缓冲区的内容更改时调用，用于监视传输和接收消息的完成情况
- (void)buffered:(MQTTSession * _Null_unspecified)session queued:(NSUInteger)queued flowingIn:(NSUInteger)flowingIn flowingOut:(NSUInteger)flowingOut;
@end


/// 智能家居消息结果
SWIFT_CLASS("_TtC19GemvarySmartHomeSDK9MsgResult")
@interface MsgResult : NSObject
/// 数据错误
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull data_error;)
+ (NSString * _Nonnull)data_error SWIFT_WARN_UNUSED_RESULT;
/// 成功
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull success;)
+ (NSString * _Nonnull)success SWIFT_WARN_UNUSED_RESULT;
/// 失败
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull failed;)
+ (NSString * _Nonnull)failed SWIFT_WARN_UNUSED_RESULT;
/// 相同设备
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull same;)
+ (NSString * _Nonnull)same SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// 智能家居的消息类型
SWIFT_CLASS("_TtC19GemvarySmartHomeSDK7MsgType")
@interface MsgType : NSObject
/// 搜索主控设备命令
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull search;)
+ (NSString * _Nonnull)search SWIFT_WARN_UNUSED_RESULT;
/// 连接主控设备
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull connect;)
+ (NSString * _Nonnull)connect SWIFT_WARN_UNUSED_RESULT;
/// 登录主控设备
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull login_server;)
+ (NSString * _Nonnull)login_server SWIFT_WARN_UNUSED_RESULT;
/// 请求断开主控设备
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull disconnect;)
+ (NSString * _Nonnull)disconnect SWIFT_WARN_UNUSED_RESULT;
/// 与主控设备心跳连接
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull heartbeat;)
+ (NSString * _Nonnull)heartbeat SWIFT_WARN_UNUSED_RESULT;
/// AP模式配置Wi-Fi信息
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull wifiConfig;)
+ (NSString * _Nonnull)wifiConfig SWIFT_WARN_UNUSED_RESULT;
/// 查询是否配网成功
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull getWifiConnectStatus;)
+ (NSString * _Nonnull)getWifiConnectStatus SWIFT_WARN_UNUSED_RESULT;
/// 房间信息类型信息
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull room_class_info;)
+ (NSString * _Nonnull)room_class_info SWIFT_WARN_UNUSED_RESULT;
/// 房间管理
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull room_manager;)
+ (NSString * _Nonnull)room_manager SWIFT_WARN_UNUSED_RESULT;
/// 网关模块类型查询
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull riu_class_info;)
+ (NSString * _Nonnull)riu_class_info SWIFT_WARN_UNUSED_RESULT;
/// 网关模块管理
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull riu_manager;)
+ (NSString * _Nonnull)riu_manager SWIFT_WARN_UNUSED_RESULT;
/// 设备具备功能属性查询
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull device_have_function;)
+ (NSString * _Nonnull)device_have_function SWIFT_WARN_UNUSED_RESULT;
/// 设备品牌信息
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull brand_info;)
+ (NSString * _Nonnull)brand_info SWIFT_WARN_UNUSED_RESULT;
/// 设备类型信息
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull device_class_info;)
+ (NSString * _Nonnull)device_class_info SWIFT_WARN_UNUSED_RESULT;
/// 新设备发现上报管理
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull new_device_manager;)
+ (NSString * _Nonnull)new_device_manager SWIFT_WARN_UNUSED_RESULT;
/// 查询软件硬件版本
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull hardware_and_software_version;)
+ (NSString * _Nonnull)hardware_and_software_version SWIFT_WARN_UNUSED_RESULT;
/// 设备管理
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull device_manager;)
+ (NSString * _Nonnull)device_manager SWIFT_WARN_UNUSED_RESULT;
/// 查询设备日志
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull device_control_logs_info;)
+ (NSString * _Nonnull)device_control_logs_info SWIFT_WARN_UNUSED_RESULT;
/// 智能联动管理
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull smart_linkage_manager;)
+ (NSString * _Nonnull)smart_linkage_manager SWIFT_WARN_UNUSED_RESULT;
/// 宿主机管理
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull host_manager;)
+ (NSString * _Nonnull)host_manager SWIFT_WARN_UNUSED_RESULT;
/// 手机端管理
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull phone_manager;)
+ (NSString * _Nonnull)phone_manager SWIFT_WARN_UNUSED_RESULT;
/// 红外转发学习状态成功
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull device_learn_state_info;)
+ (NSString * _Nonnull)device_learn_state_info SWIFT_WARN_UNUSED_RESULT;
/// 设备状态信息
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull device_state_info;)
+ (NSString * _Nonnull)device_state_info SWIFT_WARN_UNUSED_RESULT;
/// 设备控制
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull device_control;)
+ (NSString * _Nonnull)device_control SWIFT_WARN_UNUSED_RESULT;
/// 计量插座电量记录查询
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull electrical_logs;)
+ (NSString * _Nonnull)electrical_logs SWIFT_WARN_UNUSED_RESULT;
/// 智能家居数据备份
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull data_manager;)
+ (NSString * _Nonnull)data_manager SWIFT_WARN_UNUSED_RESULT;
/// zigbee PAINID 查询与修改
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull zigbee_panid_info;)
+ (NSString * _Nonnull)zigbee_panid_info SWIFT_WARN_UNUSED_RESULT;
/// 情景控制管理
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull scene_control_manager;)
+ (NSString * _Nonnull)scene_control_manager SWIFT_WARN_UNUSED_RESULT;
/// 指纹锁操作 读取操作记录
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull lock_open_logs;)
+ (NSString * _Nonnull)lock_open_logs SWIFT_WARN_UNUSED_RESULT;
/// 用户密钥管理
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull lock_passwd_manager;)
+ (NSString * _Nonnull)lock_passwd_manager SWIFT_WARN_UNUSED_RESULT;
/// 家庭成员权限管理
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull authority_manager;)
+ (NSString * _Nonnull)authority_manager SWIFT_WARN_UNUSED_RESULT;
/// 用户管理
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull user_manager;)
+ (NSString * _Nonnull)user_manager SWIFT_WARN_UNUSED_RESULT;
/// 主机管理
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull gateway_manager;)
+ (NSString * _Nonnull)gateway_manager SWIFT_WARN_UNUSED_RESULT;
/// 设置参数在首页显示
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull device_frontdisplay_manager;)
+ (NSString * _Nonnull)device_frontdisplay_manager SWIFT_WARN_UNUSED_RESULT;
/// 新设备上报
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull device_join_control;)
+ (NSString * _Nonnull)device_join_control SWIFT_WARN_UNUSED_RESULT;
/// 信道设置
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull zigbee_coordinator_manager;)
+ (NSString * _Nonnull)zigbee_coordinator_manager SWIFT_WARN_UNUSED_RESULT;
/// 上报设备在线离线消息
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull device_online_manager;)
+ (NSString * _Nonnull)device_online_manager SWIFT_WARN_UNUSED_RESULT;
/// 安防配置
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull security_manager;)
+ (NSString * _Nonnull)security_manager SWIFT_WARN_UNUSED_RESULT;
/// 安防密码配置
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull password_manager;)
+ (NSString * _Nonnull)password_manager SWIFT_WARN_UNUSED_RESULT;
/// 撤布防延时时间
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull security_set_time;)
+ (NSString * _Nonnull)security_set_time SWIFT_WARN_UNUSED_RESULT;
/// 撤布防
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull security_mode_change;)
+ (NSString * _Nonnull)security_mode_change SWIFT_WARN_UNUSED_RESULT;
/// 查询子设备固件版本信息
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull device_firmware_manager;)
+ (NSString * _Nonnull)device_firmware_manager SWIFT_WARN_UNUSED_RESULT;
/// 消息确认
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull message_confirm;)
+ (NSString * _Nonnull)message_confirm SWIFT_WARN_UNUSED_RESULT;
/// rs485转ZIGBEE设置
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull zigbee2rs485_manager;)
+ (NSString * _Nonnull)zigbee2rs485_manager SWIFT_WARN_UNUSED_RESULT;
/// 离线语音管理
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull m9cube_voice_manager;)
+ (NSString * _Nonnull)m9cube_voice_manager SWIFT_WARN_UNUSED_RESULT;
/// 红外对码
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ir_code_matching_manager;)
+ (NSString * _Nonnull)ir_code_matching_manager SWIFT_WARN_UNUSED_RESULT;
/// 设备动作管理
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull device_action_manager;)
+ (NSString * _Nonnull)device_action_manager SWIFT_WARN_UNUSED_RESULT;
/// **  服务器新增消息类型 *
/// 门铃呼叫记录
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull doorbell_call_log;)
+ (NSString * _Nonnull)doorbell_call_log SWIFT_WARN_UNUSED_RESULT;
/// 指纹锁 防劫持设置
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull anti_hijacking_manager;)
+ (NSString * _Nonnull)anti_hijacking_manager SWIFT_WARN_UNUSED_RESULT;
/// 白名单
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull add_whitelist;)
+ (NSString * _Nonnull)add_whitelist SWIFT_WARN_UNUSED_RESULT;
/// ** 坚朗之家 自定义消息类型 *
/// 刷新智能家居数据
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull fresh_smarthome_infos;)
+ (NSString * _Nonnull)fresh_smarthome_infos SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull host_system_info;)
+ (NSString * _Nonnull)host_system_info SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// 获取Wi-Fi相关信息
SWIFT_CLASS("_TtC19GemvarySmartHomeSDK12NetInterface")
@interface NetInterface : NSObject
/// 获取wifi信息
///
/// returns:
/// wifi信息
+ (NSDictionary<NSString *, id> * _Nullable)getWifiInfo SWIFT_WARN_UNUSED_RESULT;
/// 获取Wi-Fi名字
+ (NSString * _Nullable)getSsid SWIFT_WARN_UNUSED_RESULT;
/// 获取Wi-Fi的当前地址
+ (NSString * _Nullable)getCurrent_IP_Address SWIFT_WARN_UNUSED_RESULT;
/// 获取当前Wi-Fi的SSID信息
+ (NSString * _Nonnull)fetchSSIDInfo SWIFT_WARN_UNUSED_RESULT;
/// 获取当前地址
+ (NSString * _Nonnull)getCurrent_Mac SWIFT_WARN_UNUSED_RESULT;
/// 获取当前默认gateway
+ (NSString * _Nonnull)getDefaultGateway SWIFT_WARN_UNUSED_RESULT;
/// 获取upd发送数据的组播地址
+ (NSString * _Nonnull)getUDPAddress SWIFT_WARN_UNUSED_RESULT;
/// 获取wifi ssid
///
/// returns:
/// wifi的ssid
+ (NSString * _Nullable)getWifiSsid SWIFT_WARN_UNUSED_RESULT;
/// 获取bssid
///
/// returns:
/// bssid
+ (NSString * _Nullable)getWifiBssid SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// 是否查询所有
SWIFT_CLASS("_TtC19GemvarySmartHomeSDK8QueryAll")
@interface QueryAll : NSObject
/// 查询所有设备并返回
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull yes;)
+ (NSString * _Nonnull)yes SWIFT_WARN_UNUSED_RESULT;
/// 根据房间名称或者设备名称查询，只带房间名称就查询 该房间下所有设备;两个都带就查询该房间下该设备
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull no;)
+ (NSString * _Nonnull)no SWIFT_WARN_UNUSED_RESULT;
/// 查询所有支持联动动作的设备
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull linkage;)
+ (NSString * _Nonnull)linkage SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC19GemvarySmartHomeSDK17SHDeviceWifiSetup")
@interface SHDeviceWifiSetup : NSObject
/// N1小主机/N2小主机配网
/// To make it reliable, we’d better call send_neeze many times.
/// \param ssid AP’s SSID
///
/// \param password AP’s password
///
/// \param key encryption key. To use default encryption key, just leave it “” or NULL
///
/// \param ip IP address in network order, so for 192.168.1.1 it should be 0x0101a8c0
///
/// \param port default 0
///
///
/// returns:
///
+ (NSInteger)sendNeezeWithSsid:(NSString * _Nonnull)ssid password:(NSString * _Nonnull)password key:(NSString * _Nonnull)key ip:(uint32_t)ip port:(uint32_t)port SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// socket智能家居模式
typedef SWIFT_ENUM_NAMED(NSInteger, SamrtHomeMode, "SamrtHomeMode", closed) {
/// 开发模式
  SamrtHomeModeDebug = 0,
/// 测试模式
  SamrtHomeModeTest = 1,
/// 发布模式
  SamrtHomeModeRelease = 2,
};

enum SmartHomeEnvi : NSInteger;

/// 智能家居处理工具
SWIFT_CLASS("_TtC19GemvarySmartHomeSDK15SmartHomeCenter")
@interface SmartHomeCenter : NSObject
/// 当前环境的配置，默认WebSocket
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) enum SmartHomeEnvi envi;)
+ (enum SmartHomeEnvi)envi SWIFT_WARN_UNUSED_RESULT;
+ (void)setEnvi:(enum SmartHomeEnvi)value;
/// 初始化配置
+ (void)setup;
/// 根据设备信息连接
+ (void)connectDeviceWithAccountInfo:(NSDictionary<NSString *, id> * _Nonnull)accountInfo callback:(void (^ _Nullable)(NSError * _Nullable))callback;
/// 发送数据
+ (void)sendDataWithMsg:(NSString * _Nonnull)msg callback:(void (^ _Nullable)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))callback;
/// 订阅数据/接收数据上报
+ (void)receiveDataWithCallback:(void (^ _Nullable)(NSString * _Nullable))callback;
/// 断开设备
+ (void)disconnetWithCallback:(void (^ _Nullable)(NSError * _Nullable))callback;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// 智能家居环境枚举值
typedef SWIFT_ENUM_NAMED(NSInteger, SmartHomeEnvi, "SmartHomeEnvi", closed) {
/// AbleCloud环境
  SmartHomeEnviAbleCloud = 0,
/// MQTT环境
  SmartHomeEnviMQTT = 1,
/// 局域网环境
  SmartHomeEnviLan = 2,
/// WebSocket
  SmartHomeEnviWebSocket = 3,
};


/// 智能家居 局域网的连接与请求
SWIFT_CLASS("_TtC19GemvarySmartHomeSDK12SmartHomeLan")
@interface SmartHomeLan : NSObject
/// 单例
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SmartHomeLan * _Nonnull shared;)
+ (SmartHomeLan * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 接收数据的闭包
@property (nonatomic, copy) void (^ _Nullable onReceived)(NSString * _Nonnull, NSString * _Nullable);
/// 是否连接主控
@property (nonatomic, readonly) BOOL isDeviceConnected;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (id _Nonnull)copy SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)mutableCopy SWIFT_WARN_UNUSED_RESULT;
/// 发送UDP数据
- (void)udpSendWithIp:(NSString * _Nonnull)ip prot:(uint16_t)prot message:(NSString * _Nonnull)message;
/// 局域网 开始连接设备
/// \param account 帐号
///
- (void)startConnectLanDeviceWithAccount:(NSString * _Nonnull)account address:(NSString * _Nonnull)address;
- (void)tcpDisConnectLanDevice;
@end



@interface SmartHomeLan (SWIFT_EXTENSION(GemvarySmartHomeSDK))
/// UDP 发送数据 返回设备列表数据
/// \param deviceListCallBack 返回设备列表数据
///
- (void)startScanLanDeviceWithDeviceListCallBack:(void (^ _Nullable)(NSArray<NSDictionary<NSString *, id> *> * _Nonnull))deviceListCallBack;
/// UDP 返回接收到的设备列表
/// \param deviceList 返回的设备列表
///
- (void)currentLanDeviceListCallBackWithDeviceList:(void (^ _Nonnull)(NSArray<NSDictionary<NSString *, id> *> * _Nonnull))deviceList;
/// 获取设备列表信息 字典类型
- (void)currentLanDeviceInfoCallBackWithDeviceList:(void (^ _Nonnull)(NSArray<NSDictionary<NSString *, id> *> * _Nonnull))deviceList;
- (void)allLanDeviceListCallBackWithDeviceList:(void (^ _Nonnull)(NSArray<NSDictionary<NSString *, id> *> * _Nonnull))deviceList;
@end


@interface SmartHomeLan (SWIFT_EXTENSION(GemvarySmartHomeSDK))
/// 转发数据到网关
/// \param json 要发送的json数据
///
- (void)sendDataToGatewayWithJson:(NSString * _Nonnull)json callBack:(void (^ _Nonnull)(NSString * _Nonnull, NSString * _Nonnull))callBack;
/// 收到数据后的回调
/// \param onSuccess 回调
///
- (void)exeOnSuccessOnSuccess:(void (^ _Nonnull)(NSString * _Nonnull))onSuccess;
/// 未搜索到主控回调
/// \param onNoMainControl 回调
///
- (void)exeOnNoMainControlOnNoMainControl:(void (^ _Nonnull)(void))onNoMainControl;
/// \param onMainControlConnected 回调
///
- (void)exeOnMainControlConnectedOnMainControlConnected:(void (^ _Nonnull)(NSString * _Nonnull))onMainControlConnected;
/// 主控断开连接回调
/// \param onDidDisconnect 回调
///
- (void)exeOnDidDisconnectOnDidDisconnect:(void (^ _Nonnull)(NSError * _Nullable))onDidDisconnect;
@end


@interface SmartHomeLan (SWIFT_EXTENSION(GemvarySmartHomeSDK)) <GCDAsyncUdpSocketDelegate>
/// UDP接收广播数据
- (void)udpSocket:(GCDAsyncUdpSocket * _Nonnull)sock didReceiveData:(NSData * _Nonnull)data fromAddress:(NSData * _Nonnull)address withFilterContext:(id _Nullable)filterContext;
/// UDP已经连接
- (void)udpSocket:(GCDAsyncUdpSocket * _Nonnull)sock didConnectToAddress:(NSData * _Nonnull)address;
/// UDP没有连接
- (void)udpSocket:(GCDAsyncUdpSocket * _Nonnull)sock didNotConnect:(NSError * _Nullable)error;
/// UDP已经发送数据
- (void)udpSocket:(GCDAsyncUdpSocket * _Nonnull)sock didSendDataWithTag:(NSInteger)tag;
/// UDP没有发送数据
- (void)udpSocket:(GCDAsyncUdpSocket * _Nonnull)sock didNotSendDataWithTag:(NSInteger)tag dueToError:(NSError * _Nullable)error;
/// UDP已经关闭
- (void)udpSocketDidClose:(GCDAsyncUdpSocket * _Nonnull)sock withError:(NSError * _Nullable)error;
@end

@class GCDAsyncSocket;

@interface SmartHomeLan (SWIFT_EXTENSION(GemvarySmartHomeSDK)) <GCDAsyncSocketDelegate>
/// TCP开始接收数据
- (void)socket:(GCDAsyncSocket * _Nonnull)sock didConnectToHost:(NSString * _Nonnull)host port:(uint16_t)port;
/// TCP数据写入成功
- (void)socket:(GCDAsyncSocket * _Nonnull)sock didWriteDataWithTag:(NSInteger)tag;
/// TCP连接到socket
- (void)socket:(GCDAsyncSocket * _Nonnull)sock didAcceptNewSocket:(GCDAsyncSocket * _Nonnull)newSocket;
/// TCP接受端接收信息
- (void)socket:(GCDAsyncSocket * _Nonnull)sock didReadData:(NSData * _Nonnull)data withTag:(NSInteger)tag;
/// TCP断开连接
- (void)socketDidDisconnect:(GCDAsyncSocket * _Nonnull)sock withError:(NSError * _Nullable)err;
@end


/// 智能家居SDK管理类
SWIFT_CLASS("_TtC19GemvarySmartHomeSDK16SmartHomeManager")
@interface SmartHomeManager : NSObject
/// 智能家居环境设置
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) enum SmartHomeEnvi envi;)
+ (enum SmartHomeEnvi)envi SWIFT_WARN_UNUSED_RESULT;
+ (void)setEnvi:(enum SmartHomeEnvi)value;
/// 智能家居app ID(当社区模块为app ID登录时，需要设置)
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull appId;)
+ (NSString * _Nonnull)appId SWIFT_WARN_UNUSED_RESULT;
+ (void)setAppId:(NSString * _Nonnull)value;
/// 初始化智能家居
+ (void)initSmartHomeWithDebug:(BOOL)debug account:(NSString * _Nonnull)account SWIFT_METHOD_FAMILY(none);
/// 登录智能家居SDK  AbleCloud/连接Mqtt
+ (void)loginWithUid:(NSInteger)uid token:(NSString * _Nonnull)token userID:(NSString * _Nonnull)userID mqToken:(NSString * _Nonnull)mqToken;
/// 绑定智能家居设备
+ (void)bindDeviceWithDeviceInfo:(NSDictionary<NSString *, id> * _Nonnull)deviceInfo callback:(void (^ _Nullable)(NSError * _Nullable))callback;
/// 智能家居订阅数据 (AbleCloud、Mqtt、Lan订阅数据)
+ (void)subscribeWithDeviceInfo:(NSDictionary<NSString *, id> * _Nonnull)deviceInfo callback:(void (^ _Nullable)(NSError * _Nullable))callback;
/// 智能家居接收订阅数据
+ (void)reviceSubscribeData:(void (^ _Nullable)(NSString * _Nullable))callback;
/// 超时20s 没有数据返回 返回错误
+ (void)sendMsgDataToDeviceWithMsg:(NSString * _Nonnull)msg callback:(void (^ _Nullable)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))callback;
/// 每次订阅前 先之前取消数据订阅
+ (void)unSubscribeWithDeviceInfo:(NSDictionary<NSString *, id> * _Nonnull)deviceInfo;
/// 解绑智能家居设备
+ (void)unbindDeviceWithDeviceInfo:(NSDictionary<NSString *, id> * _Nonnull)deviceInfo callback:(void (^ _Nullable)(NSError * _Nullable))callback;
/// 返回当前设备状态 是否在线
+ (void)deviceStateWithCallback:(void (^ _Nullable)(NSString * _Nullable))callback;
/// 智能家居退出登录(AbleCloud退出登录 Mqtt断开连接 Lan断开连接)
+ (void)logout;
/// 开始局域网设备扫描
+ (void)lanStartScanWithAccount:(NSString * _Nonnull)account;
/// 局域网扫描返回的设备
+ (void)lanDevicesScanWithDeviceList:(void (^ _Nonnull)(NSArray<NSDictionary<NSString *, id> *> * _Nonnull))deviceList;
/// 局域网设备连接
+ (void)lanConnectWithAccount:(NSString * _Nonnull)account serverIP:(NSString * _Nonnull)serverIP address:(NSString * _Nonnull)address;
/// 局域网设备连接回调
+ (void)lanConnectMsgWithAccount:(NSString * _Nonnull)account serverIP:(NSString * _Nonnull)serverIP deviceID:(NSString * _Nonnull)deviceID callback:(void (^ _Nonnull)(NSError * _Nullable))callback;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// websocket解决方案1
SWIFT_CLASS("_TtC19GemvarySmartHomeSDK16SocketRocketTool") SWIFT_DEPRECATED_MSG("该类由于websocket连接相关问题暂时废弃")
@interface SocketRocketTool : NSObject
/// 创建单例
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) SocketRocketTool * _Nonnull share;)
+ (SocketRocketTool * _Nonnull)share SWIFT_WARN_UNUSED_RESULT;
+ (void)setShare:(SocketRocketTool * _Nonnull)value;
/// 旧款主机需要使用 字段 gid
@property (nonatomic, copy) NSString * _Nonnull gid;
/// 初始化方法
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// 断开连接
- (void)disconnect;
@end



@interface SocketRocketTool (SWIFT_EXTENSION(GemvarySmartHomeSDK))
/// 连接websocket
- (void)connectSocketWithSpaceID:(NSString * _Nonnull)spaceID access_token:(NSString * _Nonnull)access_token backMsg:(void (^ _Nonnull)(BOOL, NSError * _Nullable))backMsg;
/// 连接websocket
- (void)connectSocketWithDevCode:(NSString * _Nonnull)devCode access_token:(NSString * _Nonnull)access_token backMsg:(void (^ _Nonnull)(BOOL, NSError * _Nullable))backMsg;
/// 发送数据(旧款主机需要使用)
/// MQTT发送数据
/// \param sendMag 发送数据内容
///
/// \param backMsg 发送返回状态
///
///
/// returns:
/// 返回类型为空
- (void)sendDataWithSendMag:(NSString * _Nonnull)sendMag backMsg:(void (^ _Nonnull)(NSString * _Nullable, NSError * _Nullable))backMsg;
/// 订阅数据的结果
- (void)receiveDataWithMsg:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nullable))msg;
@end

@class SRWebSocket;

@interface SocketRocketTool (SWIFT_EXTENSION(GemvarySmartHomeSDK)) <SRWebSocketDelegate>
- (void)webSocket:(SRWebSocket * _Nonnull)webSocket didReceiveMessage:(id _Nonnull)message;
- (void)webSocket:(SRWebSocket * _Nonnull)webSocket didReceiveMessageWithString:(NSString * _Nonnull)string;
- (void)webSocket:(SRWebSocket * _Nonnull)webSocket didReceiveMessageWithData:(NSData * _Nonnull)data;
- (void)webSocketDidOpen:(SRWebSocket * _Nonnull)webSocket;
- (void)webSocket:(SRWebSocket * _Nonnull)webSocket didFailWithError:(NSError * _Nonnull)error;
- (void)webSocket:(SRWebSocket * _Nonnull)webSocket didCloseWithCode:(NSInteger)code reason:(NSString * _Nullable)reason wasClean:(BOOL)wasClean;
- (void)webSocket:(SRWebSocket * _Nonnull)webSocket didReceivePingWithData:(NSData * _Nullable)data;
- (void)webSocket:(SRWebSocket * _Nonnull)webSocket didReceivePong:(NSData * _Nullable)pongData;
@end


/// 当前域名设置
SWIFT_CLASS("_TtC19GemvarySmartHomeSDK14WebSocketParam")
@interface WebSocketParam : NSObject
/// 本地地址域名
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull wsDomain;)
+ (NSString * _Nonnull)wsDomain SWIFT_WARN_UNUSED_RESULT;
+ (void)setWsDomain:(NSString * _Nonnull)value;
/// WEBSOCKET ID
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull wsAppId;)
+ (NSString * _Nonnull)wsAppId SWIFT_WARN_UNUSED_RESULT;
+ (void)setWsAppId:(NSString * _Nonnull)value;
/// WEBSOCKET 密钥
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull wsAppSecret;)
+ (NSString * _Nonnull)wsAppSecret SWIFT_WARN_UNUSED_RESULT;
+ (void)setWsAppSecret:(NSString * _Nonnull)value;
/// 设置用户模式 默认开发者模式
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) enum SamrtHomeMode userMode;)
+ (enum SamrtHomeMode)userMode SWIFT_WARN_UNUSED_RESULT;
+ (void)setUserMode:(enum SamrtHomeMode)value;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC19GemvarySmartHomeSDK13WebSocketTool")
@interface WebSocketTool : NSObject
/// 创建单例
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) WebSocketTool * _Nonnull share;)
+ (WebSocketTool * _Nonnull)share SWIFT_WARN_UNUSED_RESULT;
+ (void)setShare:(WebSocketTool * _Nonnull)value;
/// 旧款主机需要使用 字段 gid
@property (nonatomic, copy) NSString * _Nonnull gid;
/// 初始化方法
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// 刷新Socket请求
- (void)connectWithSpaceID:(NSString * _Nonnull)spaceID access_token:(NSString * _Nonnull)access_token;
/// 断开连接
- (void)disconnectWithCallback:(void (^ _Nullable)(uint16_t, NSError * _Nullable))callback;
@end



@interface WebSocketTool (SWIFT_EXTENSION(GemvarySmartHomeSDK))
/// 连接websocket
- (void)connectSocketWithSpaceID:(NSString * _Nonnull)spaceID access_token:(NSString * _Nonnull)access_token backMsg:(void (^ _Nonnull)(BOOL, NSError * _Nullable))backMsg;
/// 连接websocket
- (void)connectSocketWithDevCode:(NSString * _Nonnull)devCode access_token:(NSString * _Nonnull)access_token backMsg:(void (^ _Nonnull)(BOOL, NSError * _Nullable))backMsg;
/// 发送数据(旧款主机需要使用)
/// MQTT发送数据
/// \param sendMag 发送数据内容
///
/// \param backMsg 发送返回状态
///
///
/// returns:
/// 返回类型为空
- (void)sendDataWithSendMag:(NSString * _Nonnull)sendMag backMsg:(void (^ _Nonnull)(NSString * _Nullable, NSError * _Nullable))backMsg;
/// 订阅数据的结果
- (void)receiveDataWithMsg:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nullable))msg;
@end


#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
